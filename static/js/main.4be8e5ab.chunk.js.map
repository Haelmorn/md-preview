{"version":3,"sources":["navbar.js","preview.js","textfield.js","App.js","Providers.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","margin","icon","marginLeft","Navbar","props","classes","react_default","a","createElement","id","AppBar","position","style","background","Toolbar","className","Polymer_default","Typography","variant","Button","color","card","minWidth","marked","setOptions","breaks","highlight","code","hljs","highlightAuto","value","Preview","content","markdown","safe_content","DOMpurify","sanitize","Card","CardContent","dangerouslySetInnerHTML","__html","Textfield","react_textarea_autosize_esm_browser","onChange","handleChange","App","paper","padding","textAlign","palette","text","secondary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","setState","target","navbar","Grid","container","item","xs","textfield","preview","Component","withStyles","height","width","overflowY","createMuiTheme","Providers","MuiThemeProvider","src_App","Boolean","window","location","hostname","match","ReactDOM","render","src_Providers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4be8e5ab.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Polymer from '@material-ui/icons/Polymer';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    margin: theme.spacing(2),\n  },\n  icon: {\n    marginLeft: theme.spacing(1),\n  }\n}));\n\nfunction Navbar(props) {\n  const classes = useStyles();\n  return (\n    <div id='navbar'>\n    <AppBar position=\"static\" style={{ background: '#13293d' }}>\n        <Toolbar className={classes.icon}>\n        <Polymer />\n          <Typography variant=\"h4\" className={classes.title}>\n          Markdown Previewer\n          </Typography>\n          <Button color=\"inherit\">/CURRENT FLAVOUR/</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport marked from 'marked';\nimport DOMpurify from 'dompurify';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport hljs from 'highlight.js';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  }\n});\n\nmarked.setOptions({\n  breaks: true,\n  highlight: function(code) {\n    return hljs.highlightAuto(code).value;\n  },\n});\n\n\nfunction Preview(props) {\n  const classes = useStyles();\n  const content = marked(props.markdown);\n  const safe_content = DOMpurify.sanitize(content)\n  return (\n    <Card className={classes.card} id='preview-card'>\n      <CardContent>\n      <Typography className={classes.title} color=\"textSecondary\">\n          Preview\n        </Typography>\n        <div dangerouslySetInnerHTML={{__html: safe_content}} />\n      </CardContent>\n    </Card>\n  )\n};\n\nexport default Preview;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  }\n});\n\nfunction Textfield(props) {\n  const classes = useStyles();\n  return (\n    <div id='input-field'>\n    <Card className={classes.card} id='markdown-card'>\n      <CardContent>\n      <Typography className={classes.title} color=\"textSecondary\">\n          Markdown\n        </Typography>\n          <TextareaAutosize\n          value={props.markdown} \n          onChange={props.handleChange}\n          >\n          </TextareaAutosize>\n      </CardContent>\n    </Card>\n    </div>\n  )\n};\n\nexport default Textfield;\n","import Navbar from './navbar'\nimport Preview from './preview';\nimport Textfield from './textfield'\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst styles = theme => ({\n  root: {\n    margin: '10px',\n    height: 400,\n    width: 300,\n    padding: '0 30px',\n    overflowY: 'scroll',\n  },\n});\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      markdown: \"\"\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    this.setState({markdown: event.target.value});\n  }\n\n\n  render () {\n    return (\n      <div>\n        <Navbar />\n      <Grid container spacing={3}>\n        <Grid item xs={6}>\n          <Textfield handleChange={this.handleChange} markdown={this.state.markdown} />\n        </Grid>\n        <Grid item xs={6}>\n          <Preview markdown={this.state.markdown} />\n        </Grid>\n      </Grid>\n      </div>  \n    );\n  }\n}\n\nexport default withStyles(styles)(App);","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport App from './App'\n\nconst theme = createMuiTheme();\n\nfunction Providers() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  );\n}\n\nexport default Providers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Providers from './Providers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Providers />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}